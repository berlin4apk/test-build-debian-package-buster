Description: Workaround ARM64 compiler issue by disabling certain optimizations
 GCC5 introduced a regression when building edk2. The symptom is that KVM
 VMs hang before displaying any EFI messages. This was bisected down to the
 introduction of some bswap optimizations that can be disabled with
 -fno-expensive-optimizations.
Author: dann frazier <dannf@ubuntu.com>
Last-Update: 2015-09-03
Bug-Ubuntu: http://bugs.launchpad.net/bugs/1489560
Forwarded: no

Index: edk2/BaseTools/Conf/tools_def.template
===================================================================
--- edk2.orig/BaseTools/Conf/tools_def.template
+++ edk2/BaseTools/Conf/tools_def.template
@@ -4437,7 +4437,7 @@
 DEFINE GCC49_ARM_ASM_FLAGS           = DEF(GCC48_ARM_ASM_FLAGS)
 DEFINE GCC49_AARCH64_ASM_FLAGS       = DEF(GCC48_AARCH64_ASM_FLAGS)
 DEFINE GCC49_ARM_CC_FLAGS            = DEF(GCC48_ARM_CC_FLAGS)
-DEFINE GCC49_AARCH64_CC_FLAGS        = $(ARCHCC_FLAGS) $(PLATFORM_FLAGS) DEF(GCC44_ALL_CC_FLAGS) -mcmodel=tiny DEF(GCC_AARCH64_CC_FLAGS)
+DEFINE GCC49_AARCH64_CC_FLAGS        = $(ARCHCC_FLAGS) $(PLATFORM_FLAGS) DEF(GCC44_ALL_CC_FLAGS) -fno-expensive-optimizations -mcmodel=tiny DEF(GCC_AARCH64_CC_FLAGS)
 DEFINE GCC49_ARM_DLINK_FLAGS         = DEF(GCC48_ARM_DLINK_FLAGS)
 DEFINE GCC49_ARM_DLINK2_FLAGS        = DEF(GCC48_ARM_DLINK2_FLAGS)
 DEFINE GCC49_AARCH64_DLINK_FLAGS     = DEF(GCC48_AARCH64_DLINK_FLAGS)
